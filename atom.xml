<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chad</title>
  <subtitle>一個對世界好奇的iOS Developer，時常玩玩 Android 小綠機器人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chadchang.github.io/"/>
  <updated>2016-11-21T15:04:56.000Z</updated>
  <id>http://chadchang.github.io/</id>
  
  <author>
    <name>Chad Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Common Background Practice</title>
    <link href="http://chadchang.github.io/2016/11/21/background-practices/"/>
    <id>http://chadchang.github.io/2016/11/21/background-practices/</id>
    <published>2016-11-21T15:04:56.000Z</published>
    <updated>2016-11-21T15:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.objc.io/issues/2-concurrency/common-background-practices/" target="_blank" rel="external">Common Background Practices - objc.io issue #2</a> 的整理筆記</p>
<a id="more"></a>
<h3 id="import-一大組資料-with-progress-bar">import 一大組資料 with progress bar</h3>
<p>Start Import</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">ImportOperation* operation = [[ImportOperation alloc] initWithStore:<span class="keyword">self</span>.store fileName:fileName];</div><div class="line"></div><div class="line"><span class="comment">//注意：更新 progress 必須在 main thread</span></div><div class="line">operation.progressCallback = ^(<span class="keyword">float</span> progress) &#123;</div><div class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span>.progressIndicator.progress = progress;</div><div class="line">&#125;];</div><div class="line">&#125;;</div><div class="line">[<span class="keyword">self</span>.operationQueue addOperation:operation];</div></pre></td></tr></table></figure>
<p>ImportOperation</p>
<figure class="highlight objc"><figcaption><span>ImportOperation.m</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithStore:(Store*)store fileName:(<span class="built_in">NSString</span>*)name</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.store = store;</div><div class="line">        <span class="keyword">self</span>.fileName = name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)main</div><div class="line">&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> can we use new in the name? I think it's bad style, any ideas for a better name?</span></div><div class="line">    <span class="keyword">self</span>.context = [<span class="keyword">self</span>.store newPrivateContext];</div><div class="line">    <span class="keyword">self</span>.context.undoManager = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.context performBlockAndWait:^</div><div class="line">    &#123;</div><div class="line">        [<span class="keyword">self</span> import];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)import</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span>* fileContents = [<span class="built_in">NSString</span> stringWithContentsOfFile:<span class="keyword">self</span>.fileName encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>];</div><div class="line">    <span class="built_in">NSArray</span>* lines = [fileContents componentsSeparatedByCharactersInSet:[<span class="built_in">NSCharacterSet</span> newlineCharacterSet]];</div><div class="line">    <span class="built_in">NSInteger</span> count = lines.count;</div><div class="line">    <span class="comment">// 每 100 行才更新一次 progress 避免阻塞</span></div><div class="line">    <span class="built_in">NSInteger</span> progressGranularity = count/<span class="number">100</span>;</div><div class="line">    __block <span class="built_in">NSInteger</span> idx = <span class="number">-1</span>;</div><div class="line">    [fileContents enumerateLinesUsingBlock:^(<span class="built_in">NSString</span>* line, <span class="built_in">BOOL</span>* shouldStop)</div><div class="line">    &#123;</div><div class="line">        idx++;</div><div class="line">        <span class="keyword">if</span> (idx == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">// header line</span></div><div class="line"></div><div class="line">		 <span class="comment">// 支持取消功能</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>.isCancelled) &#123;</div><div class="line">            *shouldStop = <span class="literal">YES</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">NSArray</span>* components = [line csvComponents];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (components.count &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"couldn't parse: %@"</span>, components);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [Stop importCSVComponents:components intoContext:<span class="keyword">self</span>.context];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (idx % progressGranularity == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.progressCallback(idx / (<span class="keyword">float</span>) count);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (idx % ImportBatchSize == <span class="number">0</span>) &#123;</div><div class="line">            [<span class="keyword">self</span>.context save:<span class="literal">NULL</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">self</span>.progressCallback(<span class="number">1</span>);</div><div class="line">    [<span class="keyword">self</span>.context save:<span class="literal">NULL</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="asynchronous-networking">Asynchronous Networking</h3>
<p>不可以使用以下代碼，因為不可以取消，會阻塞 thread，在並行時也需要多一個 thread</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">dispatch_async</span>(backgroundQueue, ^&#123;</div><div class="line">   <span class="built_in">NSData</span>* contents = [<span class="built_in">NSData</span> dataWithContentsOfURL:url]</div><div class="line">   <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">      <span class="comment">// 處理 data</span></div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用 <code>NSURLConnection</code> or <code>NSURLSessionConnection</code> 來解決</p>
<h3 id="file-i-o-in-the-background">File I/O in the Background</h3>
<p>當文件太大時，則需要一行一行的讀取而不是一次將整個文件讀入</p>
<figure class="highlight objc"><figcaption><span>Reader</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Reader</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>)enumerateLines:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span>*))block</div><div class="line">            completion:(<span class="keyword">void</span> (^)())completion;</div><div class="line">- (<span class="keyword">id</span>)initWithFileAtPath:(<span class="built_in">NSString</span>*)path;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// implement</span></div><div class="line">- (<span class="keyword">void</span>)enumerateLines:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span>*))block</div><div class="line">            completion:(<span class="keyword">void</span> (^)())completion</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.queue == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">        <span class="keyword">self</span>.queue.maxConcurrentOperationCount = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.callback = block;</div><div class="line">    <span class="keyword">self</span>.completion = completion;</div><div class="line">    <span class="keyword">self</span>.inputStream = [<span class="built_in">NSInputStream</span> inputStreamWithURL:<span class="keyword">self</span>.fileURL];</div><div class="line">    <span class="keyword">self</span>.inputStream.delegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.inputStream scheduleInRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop]</div><div class="line">                                forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</div><div class="line">    [<span class="keyword">self</span>.inputStream open];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>inputStream 的 delegate</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)stream:(<span class="built_in">NSStream</span>*)stream handleEvent:(<span class="built_in">NSStreamEvent</span>)eventCode</div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (eventCode) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventHasBytesAvailable</span>: &#123;</div><div class="line">            <span class="built_in">NSMutableData</span> *buffer = [<span class="built_in">NSMutableData</span> dataWithLength:<span class="number">4</span> * <span class="number">1024</span>];</div><div class="line">            <span class="built_in">NSUInteger</span> length = [<span class="keyword">self</span>.inputStream read:[buffer mutableBytes]</div><div class="line">                                             maxLength:[buffer length]];</div><div class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; length) &#123;</div><div class="line">                [buffer setLength:length];</div><div class="line">                __<span class="keyword">weak</span> <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</div><div class="line">                [<span class="keyword">self</span>.queue addOperationWithBlock:^&#123;</div><div class="line">                    [weakSelf processDataChunk:buffer];</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)processDataChunk:(<span class="built_in">NSMutableData</span> *)buffer</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.remainder != <span class="literal">nil</span>) &#123;</div><div class="line">        [<span class="keyword">self</span>.remainder appendData:buffer];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">self</span>.remainder = buffer;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span>.remainder obj_enumerateComponentsSeparatedBy:<span class="keyword">self</span>.delimiter</div><div class="line">                                            usingBlock:^(<span class="built_in">NSData</span>* component, <span class="built_in">BOOL</span> last) &#123;</div><div class="line">        <span class="keyword">if</span> (!last) &#123;</div><div class="line">            [<span class="keyword">self</span> emitLineWithData:component];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> &lt; [component length]) &#123;</div><div class="line">            <span class="keyword">self</span>.remainder = [component mutableCopy];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.remainder = <span class="literal">nil</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.objc.io/issues/2-concurrency/common-background-practices/&quot;&gt;Common Background Practices - objc.io issue #2&lt;/a&gt; 的整理筆記&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
      <category term="objc.io" scheme="http://chadchang.github.io/tags/objc-io/"/>
    
  </entry>
  
  <entry>
    <title>Concurrent Programming 的 API</title>
    <link href="http://chadchang.github.io/2016/11/19/objcio-2-api/"/>
    <id>http://chadchang.github.io/2016/11/19/objcio-2-api/</id>
    <published>2016-11-19T15:43:36.000Z</published>
    <updated>2016-11-20T17:32:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.objc.io/issues/2-concurrency/concurrency-apis-and-pitfalls/" target="_blank" rel="external">Concurrent Programming: APIs and Challenges - objc.io issue #2</a> 的整理筆記</p>
<a id="more"></a>
<p>難 -&gt; 易 : pthread、NSThread、GCD、NSOperationQueue</p>
<h3 id="使用-gcd">使用 GCD</h3>
<p>預設有五個 queue</p>
<ol>
<li>main queue</li>
<li>3 個不同 priority queue</li>
<li>I/O queue</li>
</ol>
<p>大多數情況使用 default 的 priority queue 就好，避免 <code>priority inversion</code></p>
<h3 id="使用-operation-queues">使用 Operation Queues</h3>
<p>可透過 override main or start 定義自己的 operations。</p>
<p>重寫 main 的方式當 return 時，這 operation 就結束了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YourOperation</span></span></div><div class="line">    - (<span class="keyword">void</span>)main</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 進行處理 ...</span></div><div class="line">    &#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>更多處理或者要可以 async，這情況下需要手動管理狀態，使用預設的 setter 才會發送 KVO，否則需要自己發送。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YourOperation</span></span></div><div class="line">    - (<span class="keyword">void</span>)start</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>.isExecuting = <span class="literal">YES</span>;</div><div class="line">        <span class="keyword">self</span>.isFinished = <span class="literal">NO</span>;</div><div class="line">        <span class="comment">// 開始處理，在結束時應該調用 finished ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    - (<span class="keyword">void</span>)finished</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>.isExecuting = <span class="literal">NO</span>;</div><div class="line">        <span class="keyword">self</span>.isFinished = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>為了使用 cancel，需一直檢查 isCancelled 屬性。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)main</div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (notDone &amp;&amp; !<span class="keyword">self</span>.isCancelled) &#123;</div><div class="line">        <span class="comment">// 進行處理</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>將 operation 放到 queue 中</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">YourOperation *operation = [[YourOperation alloc] init];</div><div class="line">[queue  addOperation:operation];</div></pre></td></tr></table></figure>
<p>也可以直接將 block 放到 queue 中，但定義自己的 NSOperation 會比較好 debug。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">    <span class="comment">// 代碼...</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>NSOperation 還可以透過 <code>maxConcurrentOperationCount</code> 控制同時執行的數量，還有根據 queue 中的 operation 的 priority 排序，還可以在 operation 之間設 dependency。</p>
<p>而性能雖然比 GCD 要低一點，但大多數可以忽略不計。</p>
<h3 id="使用-nsthread">使用 NSThread</h3>
<p>使用這的問題是在我們的 code 中也做了建立 thread 的事情，可能導致 threads 爆炸。</p>
<figure class="highlight objc"><figcaption><span>FindMinMaxThread.h</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FindMinMaxThread</span> : <span class="title">NSThread</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSUInteger</span> min;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSUInteger</span> max;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithNumbers:(<span class="built_in">NSArray</span> *)numbers;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// FindMinMaxThread.m</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FindMinMaxThread</span> </span>&#123;</div><div class="line">    <span class="built_in">NSArray</span> *_numbers;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithNumbers:(<span class="built_in">NSArray</span> *)numbers</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _numbers = numbers;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)main</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSUInteger</span> min;</div><div class="line">    <span class="built_in">NSUInteger</span> max;</div><div class="line">    <span class="comment">// 進行相關數據的處理</span></div><div class="line">    <span class="keyword">self</span>.min = min;</div><div class="line">    <span class="keyword">self</span>.max = max;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>呼叫的方式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSMutableSet</span> *threads = [<span class="built_in">NSMutableSet</span> set];</div><div class="line"><span class="built_in">NSUInteger</span> numberCount = <span class="keyword">self</span>.numbers.count;</div><div class="line"><span class="built_in">NSUInteger</span> threadCount = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> offset = (count / threadCount) * i;</div><div class="line">    <span class="built_in">NSUInteger</span> count = MIN(numberCount - offset, numberCount / threadCount);</div><div class="line">    <span class="built_in">NSRange</span> range = <span class="built_in">NSMakeRange</span>(offset, count);</div><div class="line">    <span class="built_in">NSArray</span> *subset = [<span class="keyword">self</span>.numbers subarrayWithRange:range];</div><div class="line">    FindMinMaxThread *thread = [[FindMinMaxThread alloc] initWithNumbers:subset];</div><div class="line">    [threads addObject:thread];</div><div class="line">    [thread start];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-pthread">使用 pthread</h3>
<p>複雜不易使用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> threadInfo &#123;</div><div class="line">    uint32_t * inputValues;</div><div class="line">    size_t count;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> threadResult &#123;</div><div class="line">    uint32_t min;</div><div class="line">    uint32_t max;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> * findMinAndMax(<span class="keyword">void</span> *arg)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> threadInfo <span class="keyword">const</span> * <span class="keyword">const</span> info = (<span class="keyword">struct</span> threadInfo *) arg;</div><div class="line">    uint32_t min = <span class="built_in">UINT32_MAX</span>;</div><div class="line">    uint32_t max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; info-&gt;count; ++i) &#123;</div><div class="line">        uint32_t v = info-&gt;inputValues[i];</div><div class="line">        min = MIN(min, v);</div><div class="line">        max = MAX(max, v);</div><div class="line">    &#125;</div><div class="line">    free(arg);</div><div class="line">    <span class="keyword">struct</span> threadResult * <span class="keyword">const</span> result = (<span class="keyword">struct</span> threadResult *) malloc(<span class="keyword">sizeof</span>(*result));</div><div class="line">    result-&gt;min = min;</div><div class="line">    result-&gt;max = max;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</div><div class="line">&#123;</div><div class="line">    size_t <span class="keyword">const</span> count = <span class="number">1000000</span>;</div><div class="line">    uint32_t inputValues[count];</div><div class="line"></div><div class="line">    <span class="comment">// 使用隨機數字填充 inputValues</span></div><div class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">        inputValues[i] = arc4random();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 開始4個尋找最小值和最大值的線程</span></div><div class="line">    size_t <span class="keyword">const</span> threadCount = <span class="number">4</span>;</div><div class="line">    pthread_t tid[threadCount];</div><div class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; threadCount; ++i) &#123;</div><div class="line">        <span class="keyword">struct</span> threadInfo * <span class="keyword">const</span> info = (<span class="keyword">struct</span> threadInfo *) malloc(<span class="keyword">sizeof</span>(*info));</div><div class="line">        size_t offset = (count / threadCount) * i;</div><div class="line">        info-&gt;inputValues = inputValues + offset;</div><div class="line">        info-&gt;count = MIN(count - offset, count / threadCount);</div><div class="line">        <span class="keyword">int</span> err = pthread_create(tid + i, <span class="literal">NULL</span>, &amp;findMinAndMax, info);</div><div class="line">        <span class="built_in">NSCAssert</span>(err == <span class="number">0</span>, <span class="string">@"pthread_create() failed: %d"</span>, err);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 等待線程退出</span></div><div class="line">    <span class="keyword">struct</span> threadResult * results[threadCount];</div><div class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; threadCount; ++i) &#123;</div><div class="line">        <span class="keyword">int</span> err = pthread_join(tid[i], (<span class="keyword">void</span> **) &amp;(results[i]));</div><div class="line">        <span class="built_in">NSCAssert</span>(err == <span class="number">0</span>, <span class="string">@"pthread_join() failed: %d"</span>, err);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 尋找 min 和 max</span></div><div class="line">    uint32_t min = <span class="built_in">UINT32_MAX</span>;</div><div class="line">    uint32_t max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; threadCount; ++i) &#123;</div><div class="line">        min = MIN(min, results[i]-&gt;min);</div><div class="line">        max = MAX(max, results[i]-&gt;max);</div><div class="line">        free(results[i]);</div><div class="line">        results[i] = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"min = %u"</span>, min);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"max = %u"</span>, max);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.objc.io/issues/2-concurrency/concurrency-apis-and-pitfalls/&quot;&gt;Concurrent Programming: APIs and Challenges - objc.io issue #2&lt;/a&gt; 的整理筆記&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
      <category term="objc.io" scheme="http://chadchang.github.io/tags/objc-io/"/>
    
  </entry>
  
  <entry>
    <title>使用現有 bootstrap 樣板</title>
    <link href="http://chadchang.github.io/2016/11/17/startbootstrap-sb-admin-2/"/>
    <id>http://chadchang.github.io/2016/11/17/startbootstrap-sb-admin-2/</id>
    <published>2016-11-17T14:52:51.000Z</published>
    <updated>2016-11-18T14:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>看到 <a href="https://github.com/BlackrockDigital/startbootstrap-sb-admin-2" target="_blank" rel="external">startbootstrap-sb-admin-2</a> 這漂亮而且很佛心是 free 且 open source 的樣板 (MIT license)，就把資料整合進此當做目標吧。</p>
<a id="more"></a>
<p>flask-bootstrap 內有 <a href="https://github.com/mbr/flask-bootstrap/blob/master/flask_bootstrap/templates/bootstrap/base.html" target="_blank" rel="external"><code>bootstrap/base.html</code></a>，需要把 startbootstrap-sb-admin-2 內的 code extend 且精簡。 到此步的 code 請參考 <a href="https://github.com/ChadChang/app_dashboard/commit/037ab362f14f3157393d5bcbdf934f4c2e58ca51" target="_blank" rel="external">commit #037ab3</a></p>
<p><em>Tips:</em></p>
<ol>
<li>參考原本 base.html 的框架，分別抽出即可</li>
<li>注意需要使用 <code>{{super()}}</code>，避免 override 原本的設定</li>
</ol>
<p><img src="/images/app_dashboard_init.png" alt="整合 prototype"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到 &lt;a href=&quot;https://github.com/BlackrockDigital/startbootstrap-sb-admin-2&quot;&gt;startbootstrap-sb-admin-2&lt;/a&gt; 這漂亮而且很佛心是 free 且 open source 的樣板 (MIT license)，就把資料整合進此當做目標吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://chadchang.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://chadchang.github.io/tags/Flask/"/>
    
      <category term="App Dashboard" scheme="http://chadchang.github.io/tags/App-Dashboard/"/>
    
  </entry>
  
  <entry>
    <title>加入 bootstrap</title>
    <link href="http://chadchang.github.io/2016/11/10/bootstrap/"/>
    <id>http://chadchang.github.io/2016/11/10/bootstrap/</id>
    <published>2016-11-10T12:55:02.000Z</published>
    <updated>2016-11-18T14:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>嘗試用 <a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a> 來當整個 project 的網頁部分</p>
<a id="more"></a>
<p>首先安裝 <a href="https://pythonhosted.org/Flask-Bootstrap/" target="_blank" rel="external">flask-bootstrap</a> 來建立最小可以執行的 bootstrap web 畫面</p>
<p>html 部分會放在 <code>/tempalate</code> 底下，而因 template 的變動不會自動 reload，必須重新啟動 server，只需增加 <code>app.config['TEMPLATES_AUTO_RELOAD'] = True</code> 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pip install flask-bootstrap</div></pre></td></tr></table></figure>
<figure class="highlight python"><figcaption><span>app.py</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</div><div class="line"><span class="keyword">from</span> flask_bootstrap  <span class="keyword">import</span> Bootstrap</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'TEMPLATES_AUTO_RELOAD'</span>] = <span class="keyword">True</span></div><div class="line">bootstrap = Bootstrap(app)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run(debug = <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>建立整個網站的模版 <code>base.html</code></p>
<figure class="highlight html"><figcaption><span>base.html</span></figcaption><table><tr><td class="code"><pre><div class="line">&#123;% extends "bootstrap/base.html"  %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;App Dashboard&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block navbar %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-collapse"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>App Dashboard<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block content %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  &#123;% block page_content %&#125;&#123;% endblock %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>其他每個畫面只要 extends base.html 即可。</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><div class="line">&#123;% extends "base.html" %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Main&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>結果如下:<br>
<img src="/images/flask-bootstrap.png" alt="flask-bootstrap"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘗試用 &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; 來當整個 project 的網頁部分&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://chadchang.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://chadchang.github.io/tags/Flask/"/>
    
      <category term="App Dashboard" scheme="http://chadchang.github.io/tags/App-Dashboard/"/>
    
  </entry>
  
  <entry>
    <title>App Dashboard Start</title>
    <link href="http://chadchang.github.io/2016/11/09/Dashboard/"/>
    <id>http://chadchang.github.io/2016/11/09/Dashboard/</id>
    <published>2016-11-09T10:07:39.000Z</published>
    <updated>2016-11-11T04:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>打算自己做一個 App 用的 Dashboard，記錄一下 mac 環境中建置的步驟。</p>
<a id="more"></a>
<p>Mac 環境中的 Python 可能有點舊，先用 homebrew 安裝 Python (需先安裝好 <a href="http://brew.sh/index_zh-tw.html" target="_blank" rel="external">Homebrew</a>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">brew install python</div></pre></td></tr></table></figure>
<p>而避免與系統中的環境混淆，建議安裝  <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">virtualenv</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
<p>建立一個 virtual env</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">virtualenv python-env</div><div class="line"></div><div class="line">// 啟動</div><div class="line"><span class="built_in">source</span> python-env/bin/activate</div><div class="line">// 離開</div><div class="line">deactivate</div></pre></td></tr></table></figure>
<p>安裝 <a href="http://flask.pocoo.org/" target="_blank" rel="external">Flask</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pip install Flask</div></pre></td></tr></table></figure>
<p>依照官網 sample code 建立 <a href="http://hello.py" target="_blank" rel="external">hello.py</a></p>
<figure class="highlight python"><figcaption><span>hello.py</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>執行 <code>python hello.py</code> 打開瀏覽器 <a href="http://127.0.0.1:5000/" target="_blank" rel="external">http://127.0.0.1:5000/</a> 就可以看到結果了</p>
<p><img src="/images/flask_hello.png" alt="hello flask"></p>
<p>再來希望可以讓 Flask 讀我們的 html, 在 project 中建立 <code>templates</code> folder 並放入 <code>index.html</code> 即可讀到 index.html</p>
<figure class="highlight python"><figcaption><span>hello.py</span></figcaption><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</div><div class="line"><span class="keyword">from</span>  flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>而在 debug 時可以使用 <code>app.run(debug = True)</code>，這樣在 Python code 有更動時， server 會自動 reload.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打算自己做一個 App 用的 Dashboard，記錄一下 mac 環境中建置的步驟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://chadchang.github.io/tags/Python/"/>
    
      <category term="Flask" scheme="http://chadchang.github.io/tags/Flask/"/>
    
      <category term="App Dashboard" scheme="http://chadchang.github.io/tags/App-Dashboard/"/>
    
  </entry>
  
  <entry>
    <title>啟動 Side Project - App Dashboard</title>
    <link href="http://chadchang.github.io/2016/11/08/side-project/"/>
    <id>http://chadchang.github.io/2016/11/08/side-project/</id>
    <published>2016-11-08T13:24:39.000Z</published>
    <updated>2016-11-10T08:03:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 App 寫了 六七年後，反而想再回去寫一點 Web 等不同於 App 的東西，畢竟過了這麼多年，現在整個 Web 世界又大大不同了。看到灣區日報的作者一直在持續推進他的東西，也學寫了 App 而且更新頻繁，一直在想自己有沒有可以效法他好好做一個自己用會感到興奮的東西。在思考之餘，剛好又在灣區日報看到了這篇 <a href="https://ponyfoo.com/articles/making-time-for-side-projects" target="_blank" rel="external">Making Time for Side Projects: A Daily Habit</a>，更確定是該來做些什麼了 😄</p>
<ol>
<li>It’s easier to get started</li>
<li>The pressure is off</li>
<li>You stop relying on motivation &amp; inspiration</li>
</ol>
<p>灣區日報作者的經驗我覺得很值得可以參考:</p>
<blockquote>
<p>我的經驗是，做 side project 的話，家裡的電腦永遠不關機，永遠開著 IDE、開發用的虛擬機、瀏覽器的 DevTools、iTerm2 等，每天有時間就做個 1、2 小時，沒時間弄個 10 分鐘、15 分鐘改個字體大小、顏色啥的也行，保持開發環境不變，第二天一有空閒就能接下去寫、很快進入狀態。</p>
</blockquote>
<p>每天都投入一點，即便只是五分鐘十分鐘，都是讓這 project 更前進。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 App 寫了 六七年後，反而想再回去寫一點 Web 等不同於 App 的東西，畢竟過了這麼多年，現在整個 Web 世界又大大不同了。看到灣區日報的作者一直在持續推進他的東西，也學寫了 App 而且更新頻繁，一直在想自己有沒有可以效法他好好做一個自己用會感到興奮的東西。在
    
    </summary>
    
    
      <category term="App Dashboard" scheme="http://chadchang.github.io/tags/App-Dashboard/"/>
    
  </entry>
  
  <entry>
    <title>同一天 App Store、Google Play 雙 Feature</title>
    <link href="http://chadchang.github.io/2016/10/21/feature/"/>
    <id>http://chadchang.github.io/2016/10/21/feature/</id>
    <published>2016-10-20T16:49:44.000Z</published>
    <updated>2016-11-03T17:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>App 從無到有的開發三年多，每天與同事們灌溉著 iOS/Android 這兩版本的 App，雖然已經上榜很多次，但這次是比較重大的，且兩版本同一天被 Feature 對我而言也是挺難得的。發文紀念一下。也謝謝強大的同事們的力量讓這 App 可以飛上天空。</p>
<p><img src="/images/app_store_feature.jpg" alt="App Store Feature"> <img src="/images/google_play_feature.png" alt="Google Play Feature"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;App 從無到有的開發三年多，每天與同事們灌溉著 iOS/Android 這兩版本的 App，雖然已經上榜很多次，但這次是比較重大的，且兩版本同一天被 Feature 對我而言也是挺難得的。發文紀念一下。也謝謝強大的同事們的力量讓這 App 可以飛上天空。&lt;/p&gt;
&lt;p&gt;&lt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
      <category term="App Store" scheme="http://chadchang.github.io/tags/App-Store/"/>
    
      <category term="Android" scheme="http://chadchang.github.io/tags/Android/"/>
    
      <category term="Google Play" scheme="http://chadchang.github.io/tags/Google-Play/"/>
    
      <category term="Work" scheme="http://chadchang.github.io/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>GCD 筆記</title>
    <link href="http://chadchang.github.io/2014/05/10/gcd/"/>
    <id>http://chadchang.github.io/2014/05/10/gcd/</id>
    <published>2014-05-10T04:08:00.000Z</published>
    <updated>2016-11-19T01:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>參考 <a href="http://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1" target="_blank" rel="external">Grand Central Dispatch In-Depth</a> 的筆記。</p>
<ul>
<li>Critical Section</li>
<li>Race Condition</li>
<li>Deadlock</li>
<li>Context Switch</li>
</ul>
<a id="more"></a>
<h3 id="背景讀取-dispatch-async">背景讀取 dispatch_async</h3>
<figure class="highlight objc"><figcaption><span>PhotoDetailViewController.m</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;   </div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="built_in">NSAssert</span>(_image, <span class="string">@"Image not set; required to use view controller"</span>);</div><div class="line">    <span class="keyword">self</span>.photoImageView.image = _image;</div><div class="line"> </div><div class="line">    <span class="comment">//Resize if neccessary to ensure it's not pixelated</span></div><div class="line">    <span class="keyword">if</span> (_image.size.height &lt;= <span class="keyword">self</span>.photoImageView.bounds.size.height &amp;&amp;</div><div class="line">        _image.size.width &lt;= <span class="keyword">self</span>.photoImageView.bounds.size.width) &#123;</div><div class="line">        [<span class="keyword">self</span>.photoImageView setContentMode:<span class="built_in">UIViewContentModeCenter</span>];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123; <span class="comment">// 1</span></div><div class="line">        <span class="built_in">UIImage</span> *overlayImage = [<span class="keyword">self</span> faceOverlayImageFromImage:_image];</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123; <span class="comment">// 2</span></div><div class="line">            [<span class="keyword">self</span> fadeInNewImage:overlayImage]; <span class="comment">// 3</span></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="幾秒後提示-dispatch-after">幾秒後提示 dispatch_after</h3>
<p><img src="/images/gcdpromotes.png" alt="GCD promote"></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)showOrHideNavPrompt PhotoCollectionViewController.m</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSUInteger</span> count = [[PhotoManager sharedManager] photos].count;</div><div class="line">    <span class="keyword">double</span> delayInSeconds = <span class="number">1.0</span>;</div><div class="line">    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>)); <span class="comment">// 1 </span></div><div class="line">    dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123; <span class="comment">// 2 </span></div><div class="line">        <span class="keyword">if</span> (!count) &#123;</div><div class="line">            [<span class="keyword">self</span>.navigationItem setPrompt:<span class="string">@"Add photos with faces to Googlyify them!"</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="keyword">self</span>.navigationItem setPrompt:<span class="literal">nil</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>dispatch_after 最好使用在 main queue</strong></p>
<ul>
<li>Custom Serial Queue: Use caution when using dispatch_after on a custom serial queue. You’re better off sticking to the main queue.</li>
<li>Main Queue (Serial): This is a good choice for dispatch_after; Xcode has a nice autocomplete template for this.</li>
<li>Concurrent Queue: Use caution when using dispatch_after on custom concurrent queues; it’s rare that you’ll do this. Stick to the main queue for these operations.</li>
</ul>
<h3 id="singleton">Singleton</h3>
<figure class="highlight objc"><figcaption><span>PhotoManager.m</span></figcaption><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)sharedManager</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> PhotoManager *sharedPhotoManager = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        sharedPhotoManager = [[PhotoManager alloc] init];</div><div class="line">        sharedPhotoManager-&gt;_photosArray = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sharedPhotoManager;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="讀寫問題-dispatch-barrier">讀寫問題 dispatch_barrier</h3>
<p>問題</p>
<figure class="highlight objc"><figcaption><span>PhotoManager.m</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addPhoto:(Photo *)photo</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (photo) &#123;</div><div class="line">        [_photosArray addObject:photo];</div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            [<span class="keyword">self</span> postContentAddedNotification];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> *)photos</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:_photosArray];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>dispatch_barrier 最好使用在 Custom Concurrent Queue</strong></p>
<ul>
<li>Custom Serial Queue: A bad choice here; barriers won’t do anything helpful since a serial queue executes one operation at a time anyway.</li>
<li>Global Concurrent Queue: Use caution here; this probably isn’t the best idea since other systems might be using the queues and you don’t want to monopolize them for your own purposes.</li>
<li>Custom Concurrent Queue: This is a great choice for atomic or critical areas of code. Anything you’re setting or instantiating that needs to be thread safe is a great candidate for a barrier.</li>
</ul>
<p>修正</p>
<figure class="highlight objc"><figcaption><span>PhotoManager.m</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PhotoManager</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>,<span class="keyword">readonly</span>) <span class="built_in">NSMutableArray</span> *photosArray;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">dispatch_queue_t</span> concurrentPhotoQueue; <span class="comment">///&lt; Add this</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ADD THIS:</span></div><div class="line">sharedPhotoManager-&gt;_concurrentPhotoQueue = dispatch_queue_create(<span class="string">"com.selander.GooglyPuff.photoQueue"</span>,DISPATCH_QUEUE_CONCURRENT); </div><div class="line">                                                    </div><div class="line">- (<span class="keyword">void</span>)addPhoto:(Photo *)photo</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (photo) &#123; <span class="comment">// 1</span></div><div class="line">        dispatch_barrier_async(<span class="keyword">self</span>.concurrentPhotoQueue, ^&#123; <span class="comment">// 2 </span></div><div class="line">            [_photosArray addObject:photo]; <span class="comment">// 3</span></div><div class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123; <span class="comment">// 4</span></div><div class="line">                [<span class="keyword">self</span> postContentAddedNotification]; </div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> *)photos</div><div class="line">&#123;</div><div class="line">    __block <span class="built_in">NSArray</span> *array; <span class="comment">// 1</span></div><div class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.concurrentPhotoQueue, ^&#123; <span class="comment">// 2</span></div><div class="line">        array = [<span class="built_in">NSArray</span> arrayWithArray:_photosArray]; <span class="comment">// 3</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="dispatch-sync">dispatch_sync</h3>
<p>在讀取時，reader function 沒return時是無效的，所以採用<code>dispatch_sync</code></p>
<p>讓 read 使用 sync 且與 write 在同一個 concurrent queeue 是確保 read ＆ wirte 有順序，且避免多 thread 讀寫。</p>
<p><strong>dispatch_sync 最好使用在 Custom Concurrent Queue</strong></p>
<ul>
<li>Custom Serial Queue: Be VERY careful in this situation; if you’re running in a queue and call dispatch_sync targeting the same queue, you will definitely create a deadlock.</li>
<li>Main Queue (Serial): Be VERY careful for the same reasons as above; this situation also has potential for a deadlock condition.</li>
<li>Concurrent Queue: This is a good candidate to sync work through dispatch barriers or when waiting for a task to complete so you can perform further processing.</li>
</ul>
<h3 id="全部圖片下載完後提示-dispatch-group">全部圖片下載完後提示 dispatch_group</h3>
<figure class="highlight objc"><figcaption><span>PhotoManager.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)downloadPhotosWithCompletionBlock:(BatchPhotoDownloadingCompletionBlock)completionBlock</div><div class="line">&#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123; <span class="comment">// 1</span></div><div class="line"> </div><div class="line">        __block <span class="built_in">NSError</span> *error;</div><div class="line">        dispatch_group_t downloadGroup = dispatch_group_create(); <span class="comment">// 2</span></div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">            <span class="built_in">NSURL</span> *url;</div><div class="line">            <span class="keyword">switch</span> (i) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    url = [<span class="built_in">NSURL</span> URLWithString:kOverlyAttachedGirlfriendURLString];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    url = [<span class="built_in">NSURL</span> URLWithString:kSuccessKidURLString];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    url = [<span class="built_in">NSURL</span> URLWithString:kLotsOfFacesURLString];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            dispatch_group_enter(downloadGroup); <span class="comment">// 3</span></div><div class="line">            Photo *photo = [[Photo alloc] initwithURL:url</div><div class="line">                                  withCompletionBlock:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *_error) &#123;</div><div class="line">                                      <span class="keyword">if</span> (_error) &#123;</div><div class="line">                                          error = _error;</div><div class="line">                                      &#125;</div><div class="line">                                      dispatch_group_leave(downloadGroup); <span class="comment">// 4</span></div><div class="line">                                  &#125;];</div><div class="line"> </div><div class="line">            [[PhotoManager sharedManager] addPhoto:photo];</div><div class="line">        &#125;</div><div class="line">        dispatch_group_wait(downloadGroup, DISPATCH_TIME_FOREVER); <span class="comment">// 5</span></div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123; <span class="comment">// 6</span></div><div class="line">            <span class="keyword">if</span> (completionBlock) &#123; <span class="comment">// 7</span></div><div class="line">                completionBlock(error);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>dispatch_group 皆可使用在各種 Queue</strong></p>
<ul>
<li>Custom Serial Queue: This is a good candidate for notifications when a group of tasks completes.</li>
<li>Main Queue (Serial): This is a good candidate as well in this scenario. You should be wary of using this on the main queue if you are waiting synchronously for the completion of all work since you don’t want to hold up the main thread. However, the asynchronous model is an attractive way to update the UI once several long-running tasks finish such as network calls.</li>
<li>Concurrent Queue: This as well is a good candidate for dispatch groups and completion notifications.</li>
</ul>
<p><strong>比較簡潔方式</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)downloadPhotosWithCompletionBlock:(BatchPhotoDownloadingCompletionBlock)completionBlock</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1</span></div><div class="line">    __block <span class="built_in">NSError</span> *error;</div><div class="line">    dispatch_group_t downloadGroup = dispatch_group_create(); </div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        <span class="built_in">NSURL</span> *url;</div><div class="line">        <span class="keyword">switch</span> (i) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                url = [<span class="built_in">NSURL</span> URLWithString:kOverlyAttachedGirlfriendURLString];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                url = [<span class="built_in">NSURL</span> URLWithString:kSuccessKidURLString];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                url = [<span class="built_in">NSURL</span> URLWithString:kLotsOfFacesURLString];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        dispatch_group_enter(downloadGroup); <span class="comment">// 2</span></div><div class="line">        Photo *photo = [[Photo alloc] initwithURL:url</div><div class="line">                              withCompletionBlock:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *_error) &#123;</div><div class="line">                                  <span class="keyword">if</span> (_error) &#123;</div><div class="line">                                      error = _error;</div><div class="line">                                  &#125;</div><div class="line">                                  dispatch_group_leave(downloadGroup); <span class="comment">// 3</span></div><div class="line">                              &#125;];</div><div class="line"> </div><div class="line">        [[PhotoManager sharedManager] addPhoto:photo];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    dispatch_group_notify(downloadGroup, dispatch_get_main_queue(), ^&#123; <span class="comment">// 4</span></div><div class="line">        <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">            completionBlock(error);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="同時進行-for-loop-dispatch-apply">同時進行 for loop  dispatch_apply</h3>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)downloadPhotosWithCompletionBlock:(BatchPhotoDownloadingCompletionBlock)completionBlock</div><div class="line">&#123;</div><div class="line">    __block <span class="built_in">NSError</span> *error;</div><div class="line">    dispatch_group_t downloadGroup = dispatch_group_create();</div><div class="line"> </div><div class="line">    dispatch_apply(<span class="number">3</span>, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^(size_t i) &#123;</div><div class="line"> </div><div class="line">        <span class="built_in">NSURL</span> *url;</div><div class="line">        <span class="keyword">switch</span> (i) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                url = [<span class="built_in">NSURL</span> URLWithString:kOverlyAttachedGirlfriendURLString];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                url = [<span class="built_in">NSURL</span> URLWithString:kSuccessKidURLString];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                url = [<span class="built_in">NSURL</span> URLWithString:kLotsOfFacesURLString];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        dispatch_group_enter(downloadGroup);</div><div class="line">        Photo *photo = [[Photo alloc] initwithURL:url</div><div class="line">                              withCompletionBlock:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *_error) &#123;</div><div class="line">                                  <span class="keyword">if</span> (_error) &#123;</div><div class="line">                                      error = _error;</div><div class="line">                                  &#125;</div><div class="line">                                  dispatch_group_leave(downloadGroup);</div><div class="line">                              &#125;];</div><div class="line"> </div><div class="line">        [[PhotoManager sharedManager] addPhoto:photo];</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    dispatch_group_notify(downloadGroup, dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">if</span> (completionBlock) &#123;</div><div class="line">            completionBlock(error);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但寫 app 時間有限，除非在非常大的 set 中，否則不要太 crazy。</p>
<h3 id="semaphores">Semaphores</h3>
<p>問題：太浪費 cpu</p>
<figure class="highlight objc"><figcaption><span>GooglyPuffTests.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)downloadImageURLWithString:(<span class="built_in">NSString</span> *)URLString</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:URLString];</div><div class="line">    __block <span class="built_in">BOOL</span> isFinishedDownloading = <span class="literal">NO</span>;</div><div class="line">    __unused Photo *photo = [[Photo alloc]</div><div class="line">                             initwithURL:url</div><div class="line">                             withCompletionBlock:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">                                 <span class="keyword">if</span> (error) &#123;</div><div class="line">                                     <span class="built_in">XCTFail</span>(<span class="string">@"%@ failed. %@"</span>, URLString, error);</div><div class="line">                                 &#125;</div><div class="line">                                 isFinishedDownloading = <span class="literal">YES</span>;</div><div class="line">                             &#125;];</div><div class="line"> </div><div class="line">    <span class="keyword">while</span> (!isFinishedDownloading) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dispatch_semaphore_create 方式</p>
<figure class="highlight objc"><figcaption><span>GooglyPuffTests.m</span></figcaption><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)downloadImageURLWithString:(<span class="built_in">NSString</span> *)URLString</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 1</span></div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</div><div class="line"> </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:URLString];</div><div class="line">    __unused Photo *photo = [[Photo alloc]</div><div class="line">                             initwithURL:url</div><div class="line">                             withCompletionBlock:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">                                 <span class="keyword">if</span> (error) &#123;</div><div class="line">                                     <span class="built_in">XCTFail</span>(<span class="string">@"%@ failed. %@"</span>, URLString, error);</div><div class="line">                                 &#125;</div><div class="line"> </div><div class="line">                                 <span class="comment">// 2</span></div><div class="line">                                 dispatch_semaphore_signal(semaphore);</div><div class="line">                             &#125;];</div><div class="line"> </div><div class="line">    <span class="comment">// 3</span></div><div class="line">    dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, kDefaultTimeoutLengthInNanoSeconds);</div><div class="line">    <span class="keyword">if</span> (dispatch_semaphore_wait(semaphore, timeoutTime)) &#123;</div><div class="line">        <span class="built_in">XCTFail</span>(<span class="string">@"%@ timed out"</span>, URLString);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="dispatch-source">dispatch_source</h3>
<p>蠻複雜的…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">  [<span class="keyword">super</span> viewDidLoad];</div><div class="line"> </div><div class="line">  <span class="comment">// 1</span></div><div class="line">  <span class="meta">#if DEBUG</span></div><div class="line">      <span class="comment">// 2</span></div><div class="line">      <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</div><div class="line"> </div><div class="line">      <span class="comment">// 3</span></div><div class="line">      <span class="keyword">static</span> dispatch_source_t source = <span class="literal">nil</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// 4</span></div><div class="line">      __<span class="keyword">typeof</span>(<span class="keyword">self</span>) __<span class="keyword">weak</span> weakSelf = <span class="keyword">self</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// 5</span></div><div class="line">      <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">      <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">          <span class="comment">// 6</span></div><div class="line">          source = dispatch_source_create(DISPATCH_SOURCE_TYPE_SIGNAL, SIGSTOP, <span class="number">0</span>, queue);</div><div class="line"> </div><div class="line">          <span class="comment">// 7</span></div><div class="line">          <span class="keyword">if</span> (source)</div><div class="line">          &#123;</div><div class="line">              <span class="comment">// 8</span></div><div class="line">              dispatch_source_set_event_handler(source, ^&#123;</div><div class="line">                  <span class="comment">// 9</span></div><div class="line">                  <span class="built_in">NSLog</span>(<span class="string">@"Hi, I am: %@"</span>, weakSelf);</div><div class="line">              &#125;);</div><div class="line">              dispatch_resume(source); <span class="comment">// 10</span></div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">  <span class="meta">#endif</span></div><div class="line"> </div><div class="line">  <span class="comment">// The other stuff</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;參考 &lt;a href=&quot;http://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1&quot;&gt;Grand Central Dispatch In-Depth&lt;/a&gt; 的筆記。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Critical Section&lt;/li&gt;
&lt;li&gt;Race Condition&lt;/li&gt;
&lt;li&gt;Deadlock&lt;/li&gt;
&lt;li&gt;Context Switch&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
      <category term="GCD" scheme="http://chadchang.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Constants</title>
    <link href="http://chadchang.github.io/2014/03/30/constants/"/>
    <id>http://chadchang.github.io/2014/03/30/constants/</id>
    <published>2014-03-30T06:06:00.000Z</published>
    <updated>2016-11-18T14:28:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Objective-C 的 constants 也是有學問的</p>
<p>常常是用 <code>#define myConstants var</code> 來處理一些變數，但更好的作法是用 const</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Constants.h</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> MY_CONSTANT;</div><div class="line"></div><div class="line"><span class="comment">// Constants.m</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> MY_CONSTANT = <span class="string">@"my_constant"</span>;</div></pre></td></tr></table></figure>
<p>當希望此變數不為 global 時，則用 static</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Constants.m</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> CONSTANT = <span class="string">@"my_constant"</span>;</div></pre></td></tr></table></figure>
<p><code>#define</code> 在 code 中是用取代的方式，compiler也沒辦法做 type 檢查，<code>stringInstance == strConstant</code> 的方式也比 #define 中用<code>isEqualToString</code> 快</p>
<p>當要宣告 integer 時，apple 建議用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> <span class="keyword">const</span> counter = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>但在loop中會有警告<code>Assignment of read-only variable ‘counter’</code>，需要用以下方式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)showTimer &#123;</div><div class="line">counter += <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Ref:<br>
<a href="http://webbuilders.wordpress.com/2011/03/02/constant-in-objective-c/" target="_blank" rel="external">Constant in Objective-C</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Objective-C 的 constants 也是有學問的&lt;/p&gt;
&lt;p&gt;常常是用 &lt;code&gt;#define myConstants var&lt;/code&gt; 來處理一些變數，但更好的作法是用 const&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>import header時無法找到cocoapods 使用的framework header</title>
    <link href="http://chadchang.github.io/2013/10/25/import-headershi-wu-fa-zhao-dao-cocoapods-shi-yong-de-framework-header/"/>
    <id>http://chadchang.github.io/2013/10/25/import-headershi-wu-fa-zhao-dao-cocoapods-shi-yong-de-framework-header/</id>
    <published>2013-10-25T04:30:00.000Z</published>
    <updated>2016-11-18T14:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 .h file 中想要 import cocoapods 中的 lib 時，如果找不到，可以在 user header search path 中加上<code>&quot;${PODS_ROOT}/BuildHeaders&quot;</code>，並設為 recursive。</p>
<p>Reference:</p>
<p><a href="http://stackoverflow.com/questions/12002905/ios-build-fails-with-cocoapods-cannot-find-header-files" target="_blank" rel="external">http://stackoverflow.com/questions/12002905/ios-build-fails-with-cocoapods-cannot-find-header-files</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 .h file 中想要 import cocoapods 中的 lib 時，如果找不到，可以在 user header search path 中加上&lt;code&gt;&amp;quot;${PODS_ROOT}/BuildHeaders&amp;quot;&lt;/code&gt;，並設為 recur
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://chadchang.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Heroku : Sorry , I cannot find /</title>
    <link href="http://chadchang.github.io/2012/02/24/sorry/"/>
    <id>http://chadchang.github.io/2012/02/24/sorry/</id>
    <published>2012-02-24T09:12:00.000Z</published>
    <updated>2016-11-18T14:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><font color="red">Sorry, I cannot find /</font></p>
<p>因為一堆奇怪問題把 heroku 重裝之後，deploy 上去一直出現這問題，搞了半天才發現要把 .gitignore 的 <strong><strong>public</strong></strong> 移除，否則heroku 沒辦法讀取到，一個下午又這樣沒了…QQ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;red&quot;&gt;Sorry, I cannot find /&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;因為一堆奇怪問題把 heroku 重裝之後，deploy 上去一直出現這問題，搞了半天才發現要把 .gitignore 的 &lt;strong&gt;&lt;strong&gt;publ
    
    </summary>
    
    
      <category term="Heroku" scheme="http://chadchang.github.io/tags/Heroku/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 4.3 發佈</title>
    <link href="http://chadchang.github.io/2012/02/24/xcode-4-dot-3fa-bu/"/>
    <id>http://chadchang.github.io/2012/02/24/xcode-4-dot-3fa-bu/</id>
    <published>2012-02-24T03:52:00.000Z</published>
    <updated>2016-11-18T14:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>就算 Xcode 已經在 Mac Store 了，有新版的還是不會提示更新，用了最新 4.3 版發現一些不一樣：</p>
<a id="more"></a>
<ol>
<li>New file 出來的 template 又不同了，好像每次改版都不同…Orz</li>
<li>archive 後送審的 UI 調整</li>
<li>New file 時把 view 跟 controler 整合在一起，會自動把_ViewController_加到檔名之後，也可以直接輸入要繼承的 class，但有一點不方便的是如果不是繼承 UIViewController，就不能產生.xib…Orz</li>
</ol>
<p>目前發現的是這樣，<strong><strong><code>markdown 學習使用中</code></strong></strong>~</p>
<p><strong><em>2012.02.25 update</em></strong></p>
<ol>
<li>下方 console 的部份可以設定預設位置了，類似android可以手動發送想要設定的 GPS 給 device 功能  (終於…)</li>
<li>收到 Notification 時，裡面的 NSLog 在 console 印不出來，不過看 device 內的 console log 又有…</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就算 Xcode 已經在 Mac Store 了，有新版的還是不會提示更新，用了最新 4.3 版發現一些不一樣：&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://chadchang.github.io/tags/iOS/"/>
    
      <category term="Xcode" scheme="http://chadchang.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Review Clock v1.0 上架啦!!! (已下架)</title>
    <link href="http://chadchang.github.io/2011/12/18/review-clcok-v1-dot-0shang-jia-la/"/>
    <id>http://chadchang.github.io/2011/12/18/review-clcok-v1-dot-0shang-jia-la/</id>
    <published>2011-12-18T07:01:00.000Z</published>
    <updated>2016-11-18T14:29:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://itunes.apple.com/tw/app/review-clock/id488483008?mt=8" target="_blank" rel="external">下載網址</a></p>
<p>被兩送兩退後終於搞定了，希望這是真的對生活有幫助的實用app，<br>
也希望大家喜歡，並努力改進當中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/tw/app/review-clock/id488483008?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載網址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;被兩送兩退後終於搞定了，希望這是真的對
    
    </summary>
    
    
      <category term="Review Clock" scheme="http://chadchang.github.io/tags/Review-Clock/"/>
    
  </entry>
  
</feed>
